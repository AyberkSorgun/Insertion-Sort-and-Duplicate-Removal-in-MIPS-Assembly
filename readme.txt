COMP303-Assignment2 ReportCeren Kocaogullar, 53935Ayberk Sorgun, 50397Assignment2 ReportInstructions:            This program performs the insertion sort with the inputs that taken from user. First, user gives the first instruction (2-word argument) that specifies the number of integers (e.g. 10) with a form of “–n 10”. Input the integers one by one.      After system takes the integers, it performs the insertion sort and prints the list with the duplicate values (if any). Then program removes the duplicate values from the list (if any) and prints the remaining list with unique values to the console. Lastly, program prints the sum of second list (without duplicates) and exits with an exit message.             Program gives error if the initial instruction is invalid (argument error).Detailed explanation:Introduction      In this Project, we are asked to implement an algorithm that do insertion sort with duplicate removal and reduction in MIPS. In the implementation, we took the first instruction from user that defines the number of integers that are going to be sorted in the form of “–n 5”. Then user enters integers one by one, system stores these integers and performs the insertion sort. After that, another procedure removes the repeated values from the list. The list with the unique elements and their sum are going to be printed to the console.Initializing the Program& Getting the Input from the User	We started with reading a string from the user. At this step, we need to check the legitimacy of the instruction from several angles. Instruction should be start with a “–n” and must contain an integer with a space between them, two arguments in short. Our program returns an error when:-Instruction doesn’t start with a –-A different character other than “n” after the –-There is no space between –n and the integer-Anything other than an integer after –n-Any character after a proper instruction (e.g. –n 5 d or –n 5d)      We identify the – and n by checking their ASCII code. In getting the integer value, we checked the number of digits. If it is one digit, we subtract 48 its ASCII value to get the integer value. If it has two integers, we multiplied first one with 10 and added the second digit and stored this integer value in register($a3).            After we get the number of integers, our implementation creates a counter and defines a starting point of a list($a1) to put integers in the Loop branch. In that branch, we take one integer at a time in $v0 and move them into $t0. We store that value in 0($a1) and increment the offset and loop counter until counter is equal to the desired number of outputs. When this condition satisfied, our implementation moves to sort_data branch to perform the insertion sort.      Performing Insertion Sort      At the beginning, we copy the base address of our integer list to register ($t0) and we calculated our list length bitwise and defined end point (also in $t0) and move onto outerLoop branch.       This loop only has a flag and a start point of our list. In innerLoop branch we load two adjacent integers. The implementation decides the swap operation with the slt instruction’s output. If condition holds(a[i]<a[i+1]), $t3 becomes 1 and system jumps to continue branch. If not, it increments counter and stores the values into other one’s place, swaps in short. System continues recursively this until whole list is sorted.             Function ends when our pointer matches with the last address of our list. At the end of sort_data, we will have sorted integer list with duplicates. Systems print out the sorted list with duplicates to the console and jumps to the duplicate removal part.Duplicate Removal	After the insertion sort is completed, system proceeds to remove_duplicates branch. At this part, we keep the idea of iterating over list as it is in the insertion sort and doing some specific operation when we detect duplicates.             We used 2 pointers to iterate through the list. Pointers show two adjacent elements of list. If those 2 values are equal, system jumps shiftBack branch and shift each element backwards by one and recursively continue until two pointers show different values. In addition, we decrement the list size by one in each iteration. Procedure is done when our list has only unique elements. After duplicate removal, systems print out the list without duplicates to the console.ReductionSystem takes the sorted, without duplicates list and adds all elements to the first element and prints the value to the console.	